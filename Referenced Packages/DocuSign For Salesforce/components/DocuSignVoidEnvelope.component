<apex:component controller="dsfs.DocuSignVoidEnvelopeController"
	id="DocuSignVoidEnvelopePage">
	<style>
.WarningError {
	color: red;
	font-weight: bold;
}
</style>
	<script>
function textCounter(field,cntfield,maxlimit) 
{
    if (field.value.length > maxlimit) {
        field.value = field.value.substring(0, maxlimit);
    }
    if (cntfield) 
    {
        if (cntfield.value) cntfield.value = maxlimit - field.value.length;
        else cntfield.innerHTML = "characters remaining " + (maxlimit - field.value.length);
    }
}

function AllowVoidSubmit()
{
    var reason = document.getElementById('{!$Component.VoidEnvelopeReason}').value.replace(/^\s\s*/, '').replace(/\s\s*$/, '');;
    
    if (reason.length == 0)
    {
        alert("Please provide a reason for voiding the envelope.");
        return false;
    }
    else
    {
        if (reason.length > 200)
        {
            alert("Please limit your reason to 200 characters.");
            return false;
        }
    }
    return true;
}


</script>

	<apex:pageMessages />

	<apex:sectionHeader title="{!$Label.VoidEnvelope}" subtitle="{!DSStatus.name}"
		id="PageTitleHeader" />
	<div style="width: 550px">
		<apex:pageBlock >
			<apex:pageBlockSection columns="1" title="{!PanelTitle}"
				collapsible="False" id="pnlEnvelopeInfo">
				<apex:pageBlockSectionItem >
					<apex:outputLabel value="{!$Label.EnvelopeIDColon}" />
					<apex:outputLabel value="{!DSEnvelope.dsfs__DocuSign_Envelope_ID__c}" />
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem >
					<apex:outputLabel value="{!$Label.EnvelopeSubjectColon}" />
					<apex:outputLabel value="{!DSEnvelope.dsfs__DocuSign_Email_Subject__c}" />
				</apex:pageBlockSectionItem>
			</apex:pageBlockSection>
		</apex:pageBlock>

		<apex:outputPanel rendered="{!VoidComplete==false}">
			<div style="padding-left: 10px">

				<p style="width: 500px">{!$Label.VoidingEnvelopeWillRemoveAccess}</p>
				<p style="width: 500px">{!$Label.ToVoidThisEnvelopeProvideReason}</p>

				<apex:inputTextarea style="width:500px;height:100px"
					id="VoidEnvelopeReason" value="{!myReason}"
					onkeydown="textCounter(this,document.getElementById('txtCommentChars'),200)"
					onkeyup="textCounter(this,document.getElementById('txtCommentChars'),200)" />
				<br />
				<div id="txtCommentChars">{!$Label.CharactersRemaining200}</div>

			</div>
			<div style="text-align: center">
				<apex:commandLink id="btnVoidEnvCancel" rendered="true"
					value="{!$Label.Cancel}" action="{!Cancel}" styleClass="btn"
					style="padding:2px 5px 2px 5px; text-decoration:none;">
				</apex:commandLink>
				&nbsp;&nbsp;&nbsp;
				<apex:commandLink id="btnVoidEnv" value="{!$Label.VoidEnvelope}"
					action="{!VoidEnvelope}" onclick="return AllowVoidSubmit();"
					styleClass="btn"
					style="padding:2px 5px 2px 5px; text-decoration:none;">
				</apex:commandLink>
			</div>
		</apex:outputPanel>
		<apex:outputPanel rendered="{!VoidComplete}">
			<ul>
				<li>{!$Label.RecipientsWillNoLongerAccess}</li>
				<li>{!$Label.RecipientsWhoHaveNotSigned}</li>
				<li>{!$Label.RecipientsHaveNeenNotifiedEmail}</li>
			</ul>
			<div style="text-align: center">
				<apex:commandLink id="btnVoidEnvReturn" rendered="true"
					value="{!$Label.Return}" action="{!Cancel}" styleClass="btn"
					style="padding:2px 5px 2px 5px; text-decoration:none;">
				</apex:commandLink>
			</div>
		</apex:outputPanel>
	</div>
</apex:component>